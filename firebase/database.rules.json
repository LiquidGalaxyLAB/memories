{
  "rules": {
    "users": {
       "$uid": { 
         ".write": "newData.exists() && $uid === auth.uid",
         ".validate": "newData.hasChildren(['displayName', 'email'])",
         "displayName": {
           ".read": true,
           ".validate": "newData.val() === auth.token.name"
         },
         "email": {
           ".read": "$uid === auth.uid",
           ".validate": "newData.val() === auth.token.email"
         },
         "photoURL": {
           ".read": true,
           ".validate": "newData.val().matches(/^https:\\/\\/[a-z0-9]+\\.googleusercontent\\.com\\/.*\\.jpg$/)"
         },
         "$other": {
           ".validate": false
         }
       }
    },
    "journeys": {
      ".read": true,
      ".indexOn": ["updatedAt"],
      "$uid": {
        ".write": "auth !== null",
        ".validate": "newData.hasChildren(['owner', 'title', 'updatedAt'])",
        "owner": {
          ".validate": "newData.val() === auth.uid && (!data.exists() || data.val() === auth.uid) && root.child('users/' + newData.val()).exists()"
        },
        "title": {
          ".validate": "newData.val().length > 0"
        },
        "coverURL": {
          ".validate": "newData.val().matches(/^https:\\/\\/firebasestorage.googleapis.com\\//)"
        },
        "updatedAt": {
          ".validate": "newData.val() === now"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "stories": {
      ".read": true,
      ".indexOn": ["journey"],
      "$uid": {
        ".write": "auth !== null",
        ".validate": "newData.hasChildren(['journey', 'owner', 'updatedAt', 'title'])",
        "journey": {
          ".validate": "newData.val().matches(/^[a-zA-Z0-9_-]+$/) && root.child('journeys/' + newData.val() + '/owner').val() === auth.uid"
        },
        "owner": {
          ".validate": "newData.val() === auth.uid && (!data.exists() || data.val() === auth.uid) && root.child('users/' + newData.val()).exists()"
        },
        "dateStart": {
          ".validate": "newData.isNumber()"
        },
        "updatedAt": {
          ".validate": "newData.val() === now"
        },
        "title": {
          ".validate": "newData.val().length > 0"
        },
        "description": {
          ".validate": "newData.isString()"
        },
        "map": {
          ".validate": "newData.hasChildren(['lat', 'long'])",
          "lat": {
            ".validate": "newData.isNumber()"
          },
          "long": {
            ".validate": "newData.isNumber()"
          }
        },
        "coverURL": {
          ".validate": "newData.val().matches(/^https:\\/\\/firebasestorage.googleapis.com\\//)"
        },
        "photos": {
          "$photoUid": {
            ".validate": "$photoUid >= '0' && $photoUid < '10' && newData.hasChildren(['url', 'title'])",
            "url": {
              ".validate": "newData.val().matches(/^https:\\/\\/firebasestorage.googleapis.com\\//)"
            },
            "title": {
              ".validate": "newData.isString()"
            }
          }
        }
      }
    },
    "physicalWeb": {
      "$owner": {
        ".read": "$owner === auth.uid",
        ".write": "$owner === auth.uid",
        "$uid": {
          ".validate": "!data.exists() && newData.hasChildren(['url', 'createdAt', 'beacon'])",
          "url": {
            ".validate": "newData.isString()"
          },
          "shortUrl": {
            ".validate": "newData.isString()"
          },
          "title": {
            ".validate": "newData.isString()"
          },
          "description": {
            ".validate": "newData.isString()"
          },
          "createdAt": {
            ".validate": "newData.val() === now"
          },
          "beacon": {
            ".validate": "newData.hasChildren(['id'])",
            "id": {
              ".validate": "newData.isString()"
            },
            "name": {
              ".validate": "newData.isString()"
            }
          }
        }
      }
    }
  }
}